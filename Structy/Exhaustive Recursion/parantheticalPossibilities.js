// parenthetical possibilities
// Write a function, parentheticalPossibilities, that takes in a string as an argument. The function should return an array containing all of the strings that could be generated by expanding all parentheses of the string into its possibilities.

// For example, the possibilities for 'x(mn)yz' are 'xmyz', 'xnyz'.

test_00:
parentheticalPossibilities('x(mn)yz'); // -> 
// [ 'xmyz', 'xnyz' ]
test_01:
parentheticalPossibilities("(qr)ab(stu)c"); // ->
// [ 'qabsc', 'qabtc', 'qabuc', 'rabsc', 'rabtc', 'rabuc' ]
test_02:
parentheticalPossibilities("taco"); // ->
// ['taco']
test_03:
parentheticalPossibilities(""); // ->
// ['']
test_04:
parentheticalPossibilities("(etc)(blvd)(cat)"); // ->
// [
//  'ebc', 'eba', 'ebt', 'elc', 'ela',
//  'elt', 'evc', 'eva', 'evt', 'edc',
//  'eda', 'edt', 'tbc', 'tba', 'tbt',
//  'tlc', 'tla', 'tlt', 'tvc', 'tva',
//  'tvt', 'tdc', 'tda', 'tdt', 'cbc',
//  'cba', 'cbt', 'clc', 'cla', 'clt',
//  'cvc', 'cva', 'cvt', 'cdc', 'cda',
//  'cdt'
// ]

//n = length of string, m = largest parenthetical group
// time = O(m ^ n)
// space = O(m ^ n)
const parentheticalPossibilities = (s) => {
    if(s.length === 0) return ['']
    const { remainder, chars } = getChoices(s)
    const suffixes = parentheticalPossibilities(remainder)
    let allPossibilites = []
    for (let char of chars){
      for(let suffix of suffixes){
         const remainderPossibility = char + suffix
          allPossibilites.push(remainderPossibility)
      }
    }
    return allPossibilites
  };
  
  const getChoices = (s) => {
    if(s[0] === '('){
      const endIndex = s.indexOf(')')
      const remainder = s.slice(endIndex + 1)
      const chars = s.slice(1, endIndex).split("")
      return { remainder, chars }
    } else {
      const remainder = s.slice(1)
      const chars = [s[0]]
      return { remainder, chars }
    }
  }
  
  module.exports = {
    parentheticalPossibilities,
  };
  